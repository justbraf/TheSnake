local function putFood(self)
	self.food = {x = math.random(2, 47), y = math.random(2, 47)}
	tilemap.set_tile("#grid", "layer1", self.food.x, self.food.y, 3)
end

function init(self)
	self.segments = {{x=7, y=24},{x=8, y=24},{x=9, y=24},{x=10, y=24}}
	self.dir = {x=1, y=0}
	self.dirQueue = {}
	self.speed = 7.0
	self.alive = true
	self.t = 0
	msg.post(".", "acquire_input_focus")
	math.randomseed(socket.gettime())
	putFood(self)
end

function update(self, dt)
	self.t = self.t + dt
	if self.t >= 1.0 / self.speed and self.alive then
		local newDir = table.remove(self.dirQueue, 1)
		if newDir then
			local opposite = newDir.x == -self.dir.x or newDir.y == -self.dir.y
			if not opposite then
				self.dir = newDir
			end
		end
		local head = self.segments[#self.segments]
		local newHead = {x= head.x + self.dir.x, y= head.y + self.dir.y}
		table.insert(self.segments, newHead)
		local tile = tilemap.get_tile("#grid", "layer1", newHead.x, newHead.y)
		if tile == 2 or tile == 4 then
			self.alive = false
		elseif tile == 3 then
			self.speed = self.speed + 1
			putFood(self)
		else
			local tail = table.remove(self.segments, 1)
			tilemap.set_tile("#grid", "layer1", tail.x, tail.y, 1)
		end
		for i, s in ipairs(self.segments) do
			tilemap.set_tile("#grid", "layer1", s.x, s.y, 2)
		end
		self.t = 0
	end
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Remove this function if not needed
end

function on_input(self, action_id, action)
	if action_id == hash("up") and action.pressed then
		table.insert(self.dirQueue, {x=0, y=1})
	elseif action_id == hash("down") and action.pressed then
		table.insert(self.dirQueue, {x=0, y=-1})
	elseif action_id == hash("left") and action.pressed then
		table.insert(self.dirQueue, {x=-1, y=0})
	elseif action_id == hash("right") and action.pressed then
		table.insert(self.dirQueue, {x=1, y=0})
	end
end